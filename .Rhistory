library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
# Arithmetic operations
2 + 3
4 * 5
6 / 2
# Variables
x <- 10
y <- 20
x + y
# Functions
mean(c(1, 2, 3, 4, 5))
# Arithmetic operations
2 + 3
4 * 5
6 / 2
# Variables
x <- 10
y <- 20
x + y
# Functions
mean(1, 2, 3, 4, 5)
v <- c(1, 2, 3, 4, 5)
v
m <- matrix(1:9, nrow = 3, ncol = 3)
print(m)
df <- data.frame(
name = c("Alice", "Bob", "Charlie"),
age = c(25, 30, 35),
city = c("New York", "San Francisco", "Los Angeles")
)
print(df)
l <- list(
name = "Alice",
age = 25,
city = "New York"
)
print(l)
# Install tidyverse and ggplot2 if not already installed
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
# Load the tidyverse and ggplot2
library(tidyverse)
library(ggplot2)
# Read data from a CSV file
data_csv <- read_csv("your_data_file.csv")
# Display the first few rows of the data
head(data_csv)
# Create a dummy dataset
set.seed(42)
data <- tibble(
YourCategory = factor(sample(LETTERS[1:5], 100, replace = TRUE)),
YourVariable = rnorm(100, mean = 50, sd = 10)
)
data
# Summarize the data
data_summary <- data %>%
group_by(YourCategory) %>%
summarize(
mean_value = mean(YourVariable, na.rm = TRUE),
n = n()
) %>%
arrange(desc(mean_value))
head(data_summary)
btd <- read_tsv('bechdel_test - bechdel_test.tsv')
# Define data and aesthetics
plot <- ggplot(data = mtcars, aes(x = wt, y = mpg, color = hp))
plot
# Add geom
plot <- plot + geom_point()
plot
# Adjust scale
plot <- plot + scale_color_continuous(low = "blue", high = "red")
plot
# Apply theme
plot <- plot + theme_minimal()
# Display the final plot
plot
# btd <- read_tsv('bechdel_test - bechdel_test.tsv')
# Create a scatter plot with aesthetics mapped to variables
scatter_plot <- ggplot(btd, aes(x = year, y = rating, color = factor(genre))) +
geom_point()
scatter_plot
scatter_plot_independent_aes <- ggplot(btd, aes(x = year, y = rating)) +
geom_point(size = 3, alpha = 0.3, color='gold')
# Modify the size and transparency of points within the geom
scatter_plot_independent_aes <- ggplot(btd, aes(x = year, y = rating)) +
geom_point(size = 3, alpha = 0.3, color='gold')
scatter_plot_independent_aes
scatter_plot_data_related_aes <- ggplot(btd, aes(x = year, y = rating)) +
geom_point(size = 3, alpha = 0.3, aes(color = factor(genre)))
scatter_plot_data_related_aes
# Use the mtcars dataset as an example
head(mtcars)
# Create a scatterplot of mpg (miles per gallon) vs. wt (weight)
scatter_plot <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
scatter_plot
# Use the pressure dataset as an example
head(pressure)
# Create a line plot of temperature vs. pressure
line_plot <- ggplot(pressure, aes(x = temperature, y = pressure)) +
geom_line()
line_plot
# Use the diamonds dataset as an example
head(diamonds)
# Create a bar plot of diamond counts by cut
bar_plot <- ggplot(diamonds, aes(x = cut)) +
geom_bar()
bar_plot
# Create a column plot of average price by cut
column_plot <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_col()
column_plot
# Create a histogram of the mpg variable from the mtcars dataset
histogram_plot <- ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth = 2)
histogram_plot
# Create a box plot of price by cut for the diamonds dataset
box_plot <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot()
box_plot
# Create a scatter plot of the diamonds dataset with jittered points
jittered_plot <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_point(position = "jitter", alpha = 0.5) +
theme_minimal()
jittered_plot
# Create a scatter plot of the diamonds dataset with jittered points
jittered_plot <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_point(alpha = 0.5) +
theme_minimal()
jittered_plot
# Create a scatter plot of the diamonds dataset with jittered points
jittered_plot <- ggplot(diamonds, aes(x = cut, y = price)) +
geom_point(position = "jitter", alpha = 0.5) +
theme_minimal()
jittered_plot
# Use the mtcars dataset as an example
head(mtcars)
# Create a scatter plot of mpg (miles per gallon) vs. wt (weight) with a smoothed line
scatter_plot_smooth <- ggplot(mtcars, aes(x = wt, y = mpg, label = rownames(mtcars))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, linetype = "dashed", color = "blue") +
theme_minimal()
scatter_plot_smooth
# Annotate specific data points with text labels
scatter_plot_annotate <- scatter_plot_smooth +
geom_text(data = subset(mtcars, mpg > 30 | wt > 5),
size = 3, hjust = -0.2, vjust = 0.5,
mapping = aes(label=rownames(subset(mtcars, mpg > 30 | wt > 5)))) +
annotate(geom = 'text', x = 5, y = 30, label="Text that I can add here", color="blue")
scatter_plot_annotate
# Create a scatter plot of intcross vs. rating with log-scaled axes
scatter_plot_scaled <- ggplot(btd, aes(x = rating, y = intgross)) +
geom_point() +
scale_y_continuous(trans = "log10")
scatter_plot_scaled
# Calculate the median rating for each genre
genre_median <- btd %>%
group_by(genre) %>%
summarize(median_rating = median(rating, na.rm = TRUE)) %>%
arrange(median_rating) %>%
filter(!is.na(genre)) # %>%
# filter(!genre%in%c('Family', 'Musical', 'Romance', 'Thriller'))
# Create a box plot of genre vs. rating with reordered categories
box_plot_scaled <- ggplot(btd, aes(x = genre, y = rating)) +
geom_boxplot() +
scale_x_discrete(limits = genre_median$genre) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
box_plot_scaled
# Calculate the median rating for each genre
genre_median <- btd %>%
group_by(genre) %>%
summarize(median_rating = median(rating, na.rm = TRUE)) %>%
arrange(median_rating) %>%
filter(!is.na(genre)) %>%
filter(!genre%in%c('Family', 'Musical', 'Romance', 'Thriller'))
# Create a box plot of genre vs. rating with reordered categories
box_plot_scaled <- ggplot(btd, aes(x = genre, y = rating)) +
geom_boxplot() +
scale_x_discrete(limits = genre_median$genre) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
box_plot_scaled
# Calculate the median rating for each genre
genre_median <- btd %>%
group_by(genre) %>%
summarize(median_rating = median(rating, na.rm = TRUE)) %>%
arrange(median_rating) %>%
filter(!is.na(genre)) %>%
filter(!genre%in%c('Family', 'Musical', 'Romance', 'Thriller'))
# Create a box plot of genre vs. rating with reordered categories
box_plot_scaled <- ggplot(btd, aes(x = genre, y = rating)) +
geom_boxplot() +
scale_x_discrete(limits = c('Family', 'Musical', 'Romance', 'Thriller')) + # genre_median$genre
theme(axis.text.x = element_text(angle = 45, hjust = 1))
box_plot_scaled
# Create a scatter plot of budget vs. intgross with color-scaled ratings
scatter_plot_color <- ggplot(btd, aes(x = budget, y = intgross, color = rating)) +
geom_point(alpha = 0.4) +
scale_x_continuous(labels = scales::comma, trans = "log10") +
scale_y_continuous(labels = scales::comma, trans = "log10") +
scale_color_continuous(low = "blue", high = "red") +
theme_minimal()
scatter_plot_color
# Load the required packages
# library(forcats)
# Create a new column with a refactored clean_test variable
btd_refactored <- btd %>%
mutate(clean_test_refactored = fct_recode(clean_test,
"pass" = "ok",
"fail" = "nowomen",
"fail" = "notalk",
"fail" = "men",
"N/A" = "dubious"))
head(btd_refactored)
# Create a new column with reordered genre based on the median intgross
btd_reordered <- btd_refactored %>%
mutate(genre_reordered = fct_reorder(genre, intgross, .fun = median, .desc = TRUE)) %>%
filter(!(is.na(genre) | genre%in%c('Family', 'Musical', 'Romance', 'Thriller')))
head(btd_reordered)
# Create a bar plot of the refactored clean_test and reordered genre variables
bar_plot_reordered <- ggplot(btd_reordered, aes(x = genre_reordered, fill = clean_test_refactored)) +
geom_bar(position = "dodge") +
labs(x = "Genre (reordered)", fill = "Clean Test (refactored)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
bar_plot_reordered
scatter_plot_example <- ggplot(btd, aes(x = budget, y = intgross, color = rating)) +
geom_point(alpha = 0.7) +
scale_x_continuous(labels = scales::comma, trans = "log10") +
scale_y_continuous(labels = scales::comma, trans = "log10") +
scale_color_continuous(low = "blue", high = "red") +
theme_minimal()
scatter_plot_example
scatter_plot_labeled <- scatter_plot_example +
labs(
title = "Budget vs. International Gross",
subtitle = "Colored by Rating",
x = "Budget (log scale)",
y = "International Gross (log scale)",
color = "Rating"
)
scatter_plot_labeled
scatter_plot_limited <- scatter_plot_labeled +
xlim(100000000, 3e+8) +
ylim(100000000, 3e+8) +
geom_point(mapping = aes(size = rating), alpha=0.4)
scatter_plot_limited
scatter_plot_custom_theme <- scatter_plot_limited +
theme(
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 14),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "gray", linetype = "dashed", size = 0.5),
panel.grid.minor = element_line(color = "gray", linetype = "dotted", size = 0.25)
)
scatter_plot_custom_theme
scatter_plot_example <- ggplot(btd, aes(x = budget, y = intgross, color = rating)) +
geom_point(alpha = 0.7) +
scale_x_continuous(labels = scales::comma, trans = "log10") +
scale_y_continuous(labels = scales::comma, trans = "log10") +
scale_color_continuous(low = "blue", high = "red") +
labs(
title = "Budget vs. International Gross",
subtitle = "Colored by Rating",
x = "Budget (log scale)",
y = "International Gross (log scale)",
color = "Rating"
) +
theme_minimal()
scatter_plot_example
# Save the plot as a PNG file
ggsave(
filename = "scatter_plot_example.png",
plot = scatter_plot_example,
width = 8,
height = 5,
dpi = 300
)
# Save the plot as a PDF file
ggsave(
filename = "scatter_plot_example.pdf",
plot = scatter_plot_example,
width = 8,
height = 5
)
# Load the required packages
library(ggplot2)
library(patchwork)
# Create a scatter plot of mpg vs. wt
scatter_plot <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(color = cyl)) +
labs(title = "Miles per Gallon vs. Weight", x = "Weight (1000 lbs)", y = "Miles per Gallon", color = "Cylinders") +
theme_minimal() +
theme(title = element_text(size = 12, face = "bold"), plot.subtitle = element_text(size = 10))
# Create a bar plot of the number of cars per number of cylinders
bar_plot <- ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(aes(fill = factor(cyl))) +
labs(title = "Number of Cars per Number of Cylinders", x = "Number of Cylinders", y = "Count", fill = "Cylinders") +
theme_minimal() +
theme(plot.title = element_text(size = 8, face = "bold"))
# Create a box plot of mpg per number of cylinders
box_plot <- ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_boxplot(aes(fill = factor(cyl))) +
labs(title = "Miles per Gallon per Number of Cylinders", x = "Number of Cylinders", y = "Miles per Gallon", fill = "Cylinders") +
theme_minimal() +
theme(plot.title = element_text(size = 8, face = "bold"))
# Combine the plots using patchwork
combined_plot <- scatter_plot + bar_plot + box_plot + plot_layout(ncol = 1)
combined_plot
# Collect legends and add global title, subtitle, and caption
combined_plot_annotated <- scatter_plot / (bar_plot + box_plot) +
plot_annotation(
title = "Exploring the mtcars Dataset",
subtitle = "Scatter plot, bar plot, and box plot",
caption = "Data source: mtcars",
theme = theme(plot.title = element_text(size = 13, face = "bold"), plot.subtitle = element_text(size = 11)),
tag_levels = 'A'
) # +
# plot_layout(guides = "collect")
combined_plot_annotated
# Collect legends and add global title, subtitle, and caption
combined_plot_annotated <- scatter_plot / (bar_plot + box_plot) +
plot_annotation(
title = "Exploring the mtcars Dataset",
subtitle = "Scatter plot, bar plot, and box plot",
caption = "Data source: mtcars",
theme = theme(plot.title = element_text(size = 13, face = "bold"), plot.subtitle = element_text(size = 11)),
tag_levels = 'A'
) +
plot_layout(guides = "collect")
combined_plot_annotated
# Load the required packages
library(ggplot2)
library(patchwork)
# Create a scatter plot of mpg vs. wt
scatter_plot <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(aes(color = cyl)) +
labs(title = "Miles per Gallon vs. Weight", x = "Weight (1000 lbs)", y = "Miles per Gallon", color = "Cylinders") +
theme_minimal() +
theme(title = element_text(size = 12, face = "bold"), plot.subtitle = element_text(size = 10))
# Create a bar plot of the number of cars per number of cylinders
bar_plot <- ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(aes(fill = factor(cyl))) +
labs(title = "Number of Cars per Number of Cylinders", x = "Number of Cylinders", y = "Count", fill = "Cylinders") +
theme_minimal() +
theme(plot.title = element_text(size = 8, face = "bold"), legend.position="none")
# Create a box plot of mpg per number of cylinders
box_plot <- ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_boxplot(aes(fill = factor(cyl))) +
labs(title = "Miles per Gallon per Number of Cylinders", x = "Number of Cylinders", y = "Miles per Gallon", fill = "Cylinders") +
theme_minimal() +
theme(plot.title = element_text(size = 8, face = "bold"))
# Combine the plots using patchwork
combined_plot <- scatter_plot + bar_plot + box_plot + plot_layout(ncol = 1)
combined_plot
# Collect legends and add global title, subtitle, and caption
combined_plot_annotated <- scatter_plot / (bar_plot + box_plot) +
plot_annotation(
title = "Exploring the mtcars Dataset",
subtitle = "Scatter plot, bar plot, and box plot",
caption = "Data source: mtcars",
theme = theme(plot.title = element_text(size = 13, face = "bold"), plot.subtitle = element_text(size = 11)),
tag_levels = 'A'
) +
plot_layout(guides = "collect")
combined_plot_annotated
# Use the mtcars dataset as an example
head(mtcars)
# Create a scatter plot of mpg (miles per gallon) vs. wt (weight) with a smoothed line
scatter_plot_smooth <- ggplot(mtcars, aes(x = wt, y = mpg, label = rownames(mtcars))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, linetype = "dashed", color = "blue") +
theme_minimal()
scatter_plot_smooth
# Annotate specific data points with text labels
scatter_plot_annotate <- scatter_plot_smooth +
geom_text(data = subset(mtcars, mpg > 30 | wt > 5),
size = 3, hjust = 0.25, vjust = 0.5,
mapping = aes(label=rownames(subset(mtcars, mpg > 30 | wt > 5)))) +
annotate(geom = 'text', x = 5, y = 30, label="Text that I can add here", color="blue")
scatter_plot_annotate
# Use the mtcars dataset as an example
head(mtcars)
# Create a scatter plot of mpg (miles per gallon) vs. wt (weight) with a smoothed line
scatter_plot_smooth <- ggplot(mtcars, aes(x = wt, y = mpg, label = rownames(mtcars))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, linetype = "dashed", color = "blue") +
theme_minimal()
scatter_plot_smooth
# Annotate specific data points with text labels
scatter_plot_annotate <- scatter_plot_smooth +
geom_text(data = subset(mtcars, mpg > 30 | wt > 5),
size = 3, hjust = 0.25, vjust = 1.5,
mapping = aes(label=rownames(subset(mtcars, mpg > 30 | wt > 5)))) +
annotate(geom = 'text', x = 5, y = 30, label="Text that I can add here", color="blue")
scatter_plot_annotate
# Use the mtcars dataset as an example
head(mtcars)
# Create a scatter plot of mpg (miles per gallon) vs. wt (weight) with a smoothed line
scatter_plot_smooth <- ggplot(mtcars, aes(x = wt, y = mpg, label = rownames(mtcars))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, linetype = "dashed", color = "blue") +
theme_minimal()
scatter_plot_smooth
# Annotate specific data points with text labels
scatter_plot_annotate <- scatter_plot_smooth +
geom_text(data = subset(mtcars, mpg > 30 | wt > 5),
size = 3, hjust = 0.25, vjust = c(1.5, 3.5),
mapping = aes(label=rownames(subset(mtcars, mpg > 30 | wt > 5)))) +
annotate(geom = 'text', x = 5, y = 30, label="Text that I can add here", color="blue")
scatter_plot_annotate
# Use the mtcars dataset as an example
head(mtcars)
# Create a scatter plot of mpg (miles per gallon) vs. wt (weight) with a smoothed line
scatter_plot_smooth <- ggplot(mtcars, aes(x = wt, y = mpg, label = rownames(mtcars))) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, linetype = "dashed", color = "blue") +
theme_minimal()
scatter_plot_smooth
# Annotate specific data points with text labels
scatter_plot_annotate <- scatter_plot_smooth +
geom_text(data = subset(mtcars, mpg > 30 | wt > 5),
size = 3, hjust = 0.25, vjust = 1.5,
mapping = aes(label=rownames(subset(mtcars, mpg > 30 | wt > 5)))) +
annotate(geom = 'text', x = 5, y = 30, label="Text that I can add here", color="blue")
scatter_plot_annotate
